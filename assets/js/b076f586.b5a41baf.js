"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[719],{8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}},8841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"dev.leetcode/dev.leetcode.literate-leetcode.example.3sum.v000","title":"Literate 3Sum Example","description":"Demonstrates solving the 3Sum problem using literate functions","source":"@site/docs/dev.leetcode/2025-05-03_literate-leetcode.example.3sum.v000.md","sourceDirName":"dev.leetcode","slug":"/dev.leetcode/dev.leetcode.literate-leetcode.example.3sum.v000","permalink":"/toy_projects/docs/dev.leetcode/dev.leetcode.literate-leetcode.example.3sum.v000","draft":false,"unlisted":false,"editUrl":"https://github.com/atarashiineko/toy_projects/tree/main/docs/dev.leetcode/2025-05-03_literate-leetcode.example.3sum.v000.md","tags":[{"inline":true,"label":"coding","permalink":"/toy_projects/docs/tags/coding"},{"inline":true,"label":"leetcode","permalink":"/toy_projects/docs/tags/leetcode"}],"version":"current","frontMatter":{"id":"dev.leetcode.literate-leetcode.example.3sum.v000","title":"Literate 3Sum Example","description":"Demonstrates solving the 3Sum problem using literate functions","tags":["coding","leetcode"],"created_date":"2025-05-03T00:00:00.000Z","updated_date":"2025-05-03T00:00:00.000Z","version":0},"sidebar":"mainSidebar","next":{"title":"Literate Leetcode Code Rewriter","permalink":"/toy_projects/docs/dev.leetcode/dev.leetcode.literate-leetcode.v000"}}');var i=n(4848),a=n(8453);const s={id:"dev.leetcode.literate-leetcode.example.3sum.v000",title:"Literate 3Sum Example",description:"Demonstrates solving the 3Sum problem using literate functions",tags:["coding","leetcode"],created_date:new Date("2025-05-03T00:00:00.000Z"),updated_date:new Date("2025-05-03T00:00:00.000Z"),version:0},l=void 0,o={},c=[{value:"Prompt",id:"prompt",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"prompt",children:"Prompt"}),"\n",(0,i.jsxs)(t.p,{children:['Implement the Leetcode "3Sum" problem. Given an array of integers, return all unique triplets ',(0,i.jsx)(t.code,{children:"[a, b, c]"})," such that ",(0,i.jsx)(t.code,{children:"a + b + c = 0"}),". Apply the literate style described in ",(0,i.jsx)(t.code,{children:"2025-05-03_literate-leetcode.v000.md"})," and respond only with the final code block."]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(t.p,{children:"This prompt has no parameters."}),"\n",(0,i.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Input"}),'\nUser: "Generate a literate solution for the 3Sum problem in JavaScript."']}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Expected Output"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"/** Finds every unique triplet of numbers that sums to zero. */\nfunction threeSum(nums) {\n  const sorted = ascendingCopyOf(nums);\n  const triplets = newTripletList();\n  forEachIndex(sorted, index => {\n    if (shouldSkipIndex(sorted, index)) {\n      return;\n    }\n    searchPairsFromIndex(sorted, index, triplets);\n  });\n  return triplets;\n}\n\n/** Produces a sorted copy of the numbers. */\nfunction ascendingCopyOf(numbers) {\n  return [...numbers].sort((a, b) => a - b);\n}\n\n/** Returns an empty list for the resulting triplets. */\nfunction newTripletList() {\n  return [];\n}\n\n/** Runs a callback for every starting index. */\nfunction forEachIndex(array, callback) {\n  for (let i = 0; i < array.length - 2; i++) {\n    callback(i);\n  }\n}\n\n/** Determines if the current index should be skipped. */\nfunction shouldSkipIndex(array, index) {\n  return index > 0 && array[index] === array[index - 1];\n}\n\n/** Looks for valid pairs using two pointers. */\nfunction searchPairsFromIndex(array, index, triplets) {\n  let left = index + 1;\n  let right = array.length - 1;\n  while (left < right) {\n    const sum = sumOfThree(array[index], array[left], array[right]);\n    if (isZero(sum)) {\n      appendTriplet(triplets, array[index], array[left], array[right]);\n      left = increment(left);\n      right = decrement(right);\n      left = skipDuplicatesOnLeft(array, left, right);\n      right = skipDuplicatesOnRight(array, left, right);\n    } else if (sum < 0) {\n      left = increment(left);\n    } else {\n      right = decrement(right);\n    }\n  }\n}\n\n/** Returns the sum of three numbers. */\nfunction sumOfThree(a, b, c) {\n  return a + b + c;\n}\n\n/** Checks if a value is exactly zero. */\nfunction isZero(value) {\n  return value === 0;\n}\n\n/** Adds a triplet to the list of results. */\nfunction appendTriplet(list, a, b, c) {\n  list.push([a, b, c]);\n}\n\n/** Increments a numeric index. */\nfunction increment(value) {\n  return value + 1;\n}\n\n/** Decrements a numeric index. */\nfunction decrement(value) {\n  return value - 1;\n}\n\n/** Skips duplicate values while moving the left pointer. */\nfunction skipDuplicatesOnLeft(array, left, right) {\n  while (left < right && areEqual(array[left], array[left - 1])) {\n    left = increment(left);\n  }\n  return left;\n}\n\n/** Skips duplicate values while moving the right pointer. */\nfunction skipDuplicatesOnRight(array, left, right) {\n  while (left < right && areEqual(array[right], array[right + 1])) {\n    right = decrement(right);\n  }\n  return right;\n}\n\n/** Determines if two numbers are equal. */\nfunction areEqual(a, b) {\n  return a === b;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(t.p,{children:["The function ",(0,i.jsx)(t.code,{children:"threeSum"})," begins by copying and sorting the input array so that two-pointer scanning works reliably. It iterates over every possible starting index, skipping duplicates to avoid repeated triplets. For each index it runs a search with two pointers (",(0,i.jsx)(t.code,{children:"left"})," and ",(0,i.jsx)(t.code,{children:"right"}),") that moves inward until all combinations are checked. Helpers like ",(0,i.jsx)(t.code,{children:"sumOfThree"}),", ",(0,i.jsx)(t.code,{children:"isZero"}),", and ",(0,i.jsx)(t.code,{children:"appendTriplet"})," break down the logic into very small, descriptive operations. Duplicate values are skipped using ",(0,i.jsx)(t.code,{children:"skipDuplicatesOnLeft"})," and ",(0,i.jsx)(t.code,{children:"skipDuplicatesOnRight"})," so each triplet appears only once."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);